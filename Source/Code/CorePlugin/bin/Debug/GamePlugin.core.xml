<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GamePlugin.core</name>
    </assembly>
    <members>
        <member name="M:Alzaitu.Lacewing.Client.Packet.Packet.GetSize">
            <summary>
            Retrive the size of the packet, in bytes.
            </summary>
            <returns>A number between 0 and 4294967295 describing the length of the packet in bytes.</returns>
        </member>
        <member name="M:Alzaitu.Lacewing.Client.Packet.Packet.ReadPacket(System.Byte[],Alzaitu.Lacewing.Client.LacewingClient)">
            		 Example UDP Binary message: {Type: xx, Sub: xx, Channel id: x, x, User ID: x, x, Message...}
        </member>
        <member name="P:Alzaitu.Lacewing.Client.Packet.PacketTypeAttribute.Type">
            <summary>
            The type of the packet.
            </summary>
        </member>
        <member name="P:Alzaitu.Lacewing.Client.Packet.PacketTypeAttribute.SubType">
            <summary>
            The subtype of the packet.
            </summary>
        </member>
        <member name="P:Alzaitu.Lacewing.Client.Packet.PacketTypeAttribute.CanWrite">
            <summary>
            If true, this packet can be written.
            </summary>
        </member>
        <member name="P:Alzaitu.Lacewing.Client.Packet.PacketTypeAttribute.CanRead">
            <summary>
            If true, this packet can be read.
            </summary>
        </member>
        <member name="T:Alzaitu.Lacewing.EnumHelper.StringValueAttribute">
            <summary>
            This attribute is used to represent a string value
            for a value in an enum.
            </summary>
        </member>
        <member name="P:Alzaitu.Lacewing.EnumHelper.StringValueAttribute.StringValue">
            <summary>
            Holds the stringvalue for a value in an enum.
            </summary>
        </member>
        <member name="M:Alzaitu.Lacewing.EnumHelper.StringValueAttribute.#ctor(System.String)">
            <summary>
            Constructor used to init a StringValue Attribute
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Alzaitu.Lacewing.EnumHelper.StringValueReflector.GetStringValue(System.Enum)">
            <summary>
            Will get the string value for a given enums value, this will
            only work if you assign the StringValue attribute to
            the items in your enum.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:FNaFMP.Utility.StringValueAttribute.StringValue">
            <summary>
            Holds the stringvalue for a value in an enum.
            </summary>
        </member>
        <member name="M:FNaFMP.Utility.StringValueAttribute.#ctor(System.String)">
            <summary>
            Constructor used to init a StringValue Attribute
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FNaFMP.Utility.StringValueReflector.GetStringValue(System.Enum)">
            <summary>
            Will get the string value for a given enums value, this will
            only work if you assign the StringValue attribute to
            the items in your enum.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:FNaFMP.Utility.StringListValueAttribute.StringValue">
            <summary>
            Holds the stringvalue for a value in an enum.
            </summary>
        </member>
        <member name="M:FNaFMP.Utility.StringListValueAttribute.#ctor(System.String[])">
            <summary>
            Constructor used to init a StringValue Attribute
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FNaFMP.Utility.StringListValueReflector.GetStringValue(System.Enum,System.Int32)">
            <summary>
            Will get the string value for a given enums value, this will
            only work if you assign the StringListValue attribute to
            the items in your enum.
            </summary>
            <param name="value"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="T:FNaFMP.Core">
            <summary>
            Defines a Duality core plugin.
            </summary>
        </member>
        <member name="T:FNaFMP.Core.Character">
            <summary>
            List of characters, starting with None (0)
            </summary>
        </member>
        <member name="P:FNaFMP.Core.DEBUG">
            <summary>
            If true, more information will be available to the user
            </summary>
        </member>
        <member name="T:FNaFMP.Core.GameDifficulty">
            <summary>List of game difficulties</summary>
        </member>
        <member name="F:FNaFMP.Core.GameDifficulty.VeryEasy">
            <summary>
            Default move times, extra slow power drain
            </summary>
        </member>
        <member name="F:FNaFMP.Core.GameDifficulty.Easy">
            <summary>
            Couple seconds faster move times, slow power drain
            </summary>
        </member>
        <member name="F:FNaFMP.Core.GameDifficulty.Medium">
            <summary>
            Significantly faster move times, noticably faster power drain
            </summary>
        </member>
        <member name="F:FNaFMP.Core.GameDifficulty.Hard">
            <summary>
            Faster move times, faster power drain
            </summary>
        </member>
        <member name="F:FNaFMP.Core.GameDifficulty.VeryHard">
            <summary>
            Extra fast move times, extra fast power drain
            </summary>
        </member>
        <member name="P:FNaFMP.Core.Difficulty">
            <summary>
            Defines the difficulty of the game
            <br/>
            <b>For now this will always be Very Easy</b>
            </summary>
        </member>
        <member name="P:FNaFMP.Office.GuardStatus.Light">
            <summary>
            Returns the guards current light direction
            <br/>
            0 = not using lights, 1 = left, 2 = right
            </summary>
        </member>
        <member name="P:FNaFMP.Office.GuardStatus.LeftDoorClosed">
            <summary>
            Returns wether the left door is closed
            </summary>
            <returns>
            true if the left door is closed, false otherwise
            </returns>
        </member>
        <member name="P:FNaFMP.Office.GuardStatus.RightDoorClosed">
            <summary>
            Returns wether the right door is closed
            </summary>
            <returns>
            true if the right door is closed, false otherwise
            </returns>
        </member>
        <member name="P:FNaFMP.Office.GuardStatus.IsViewing">
            <summary>
            Returns wether the guard is looking at the camera
            </summary>
            <returns>
            true if the guard is viewing the camera, false otherwise
            </returns>
        </member>
        <member name="P:FNaFMP.Office.GuardStatus.Position">
            <summary>
            Returns the current camera position of the guard
            </summary>
            <remarks>
            This should be used while also checking if the guard is viewing the camera or not. <see cref="P:FNaFMP.Office.GuardStatus.IsViewing"/>
            </remarks>
        </member>
        <member name="P:FNaFMP.Office.GuardStatus.Active">
            <summary>
            Returns wether the guard is active or not
            </summary>
            <returns>
            true if the guard is active, false otherwise
            </returns>
        </member>
    </members>
</doc>
